pipeline {
    agent any
    
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'deploy',url: 'https://github.com/emcdanie/hackprac.git'
	        }
        }        
        stage('Requirements') {
            steps {
                echo 'Installing dependencies...'
                sh 'pip3 install -r requirements.txt'
                sh 'python3 project/init/init_db.py'
            }
        }
        stage('Unit/Integration tests') {
           steps {
                echo 'Unit/Integration...'
                sh 'python3 -m unittest discover -s tests/unit -v'
            }
        }       
       stage('Acceptance tests') {
            steps {
                echo 'Acceptance...'
                sh 'python3 -m unittest discover -s tests/acceptance-flask/ -v'
            }
        }
        stage('Create image') {
            steps {
                echo 'creating image...'
                sh 'docker build -t elletamc.azurecr.io/elletamchackprac:v1 -f Dockerfile .'
            }
        } 
        stage('Publish image') {
            steps {
                echo 'pushing image...'
                withDockerRegistry([ credentialsId: "azure-credentials2", url: "https://elletamc.azurecr.io" ]) {
                    sh 'docker push elletamc.azurecr.io/elletamchackprac:v1'
                }
            }
        }
        stage('Exexuting kubectl') {
            steps {
                echo 'Exexuting kubectl'
                withKubeConfig([credentialsId: 'k8-credentials2']) {
                    sh "kubectl apply -f kubernetes/3_hackprac_deployment_az.yaml"
                    sh 'kubectl apply -f kubernetes/4_hackprac_service_az.yaml'
                    sh 'kubectl port-forward service/python-package-flask-test-service 5000:5000 &'
                       }
            }
        }
        stage('External acceptance tests') {
            steps{
                echo 'External acceptance tests...'
                sh 'python3 -m unittest discover -s tests/acceptance-request -v'
            }
        }
    }
    post {
        always {
            echo 'post do this always...'
        }
        success{
            echo 'post do this when success...'
        }
        failure {
            echo 'post do this when failure...'
        }
        cleanup{
            echo 'post do this when cleanup...'
            sh 'pkill -f "port-forward"'
            deleteDir()
        }
    }
}